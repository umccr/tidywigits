---
title: "Schemas Tidy"
output: rmarkdown::html_document
vignette: >
  %\VignetteIndexEntry{Schemas Tidy}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
    echo: false
---

```{r}
#| label: pkgs
#| message: false
{
  use("tidywigits", c("Config", "NEMO_TOOLS"))
  use("dplyr")
  use("glue", "glue")
  use("purrr", "map")
  use("readr", "read_tsv")
  use("tibble", "tibble")
  use("tidyr", "unnest")
  use("fs", "dir_info")
  use("knitr", "kable")
  use("reactable", "reactable")
  use("htmltools", c("HTML", "tags"))
}
vignettes_script <- system.file("scripts/vignettes/schemas.R", package = "tidywigits")
source(vignettes_script)
```

```{r}
#| label: opts
options(width = 120)
```

```{r}
#| label: read_configs
tools <- NEMO_TOOLS
get_schemas_tidy <- function(tool) {
  conf <- Config$new(tool)
  .get_tidy <- function() {
    desc <- conf$get_tidy_descriptions()
    conf$tidy_schemas_all |>
      dplyr::left_join(desc, by = "name") |>
      dplyr::select(
        tbl = "name",
        description = "value",
        "version",
        subtbl = "tbl",
        "schema"
      )
  }
  .get_tidy()
}
d <- purrr::map(tools, get_schemas_tidy) |>
  purrr::set_names(toupper(tools)) |>
  dplyr::bind_rows(.id = "tool") |>
  tidyr::nest(schema_version = c("version", "schema")) |>
  dplyr::mutate(row_id = row_number(), n = row_id) |>
  dplyr::relocate(n)
```

```{r}
#| label: reactable_schema
reactable_schema(d)
```